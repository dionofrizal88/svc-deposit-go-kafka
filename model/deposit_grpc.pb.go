// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: model/deposit.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepositsClient is the client API for Deposits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositsClient interface {
	List(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*WalletHistory, error)
	Deposit(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type depositsClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositsClient(cc grpc.ClientConnInterface) DepositsClient {
	return &depositsClient{cc}
}

func (c *depositsClient) List(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*WalletHistory, error) {
	out := new(WalletHistory)
	err := c.cc.Invoke(ctx, "/model.Deposits/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsClient) Deposit(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.Deposits/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositsServer is the server API for Deposits service.
// All implementations must embed UnimplementedDepositsServer
// for forward compatibility
type DepositsServer interface {
	List(context.Context, *WalletId) (*WalletHistory, error)
	Deposit(context.Context, *Wallet) (*emptypb.Empty, error)
}

// UnimplementedDepositsServer must be embedded to have forward compatible implementations.
type UnimplementedDepositsServer struct {
}

func (UnimplementedDepositsServer) List(context.Context, *WalletId) (*WalletHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDepositsServer) Deposit(context.Context, *Wallet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedDepositsServer) mustEmbedUnimplementedDepositsServer() {}

// UnsafeDepositsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositsServer will
// result in compilation errors.
type UnsafeDepositsServer interface {
	mustEmbedUnimplementedDepositsServer()
}

func RegisterDepositsServer(s grpc.ServiceRegistrar, srv DepositsServer) {
	s.RegisterService(&Deposits_ServiceDesc, srv)
}

func _Deposits_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Deposits/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServer).List(ctx, req.(*WalletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deposits_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Deposits/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServer).Deposit(ctx, req.(*Wallet))
	}
	return interceptor(ctx, in, info, handler)
}

// Deposits_ServiceDesc is the grpc.ServiceDesc for Deposits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deposits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Deposits",
	HandlerType: (*DepositsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Deposits_List_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Deposits_Deposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/deposit.proto",
}
